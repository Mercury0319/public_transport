# -*- coding: utf-8 -*-
"""Nwe_data_process.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/190KiI7BQ2DMrRKDpDzJpwdf7-_e4DCqJ
"""

# Impact of Weather Patterns on Public Transit Ridership:
# A Comprehensive Analysis of Philadelphia's Transportation System

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import seaborn as sns
from matplotlib.ticker import MultipleLocator
from matplotlib.colors import LinearSegmentedColormap
import matplotlib.dates as mdates
from scipy import stats
import warnings
warnings.filterwarnings('ignore')

# Set publication-quality plot parameters
# Replace the font settings at the beginning of the notebook with these lines:
plt.rcParams['font.family'] = 'serif'
# Use a serif font that's available in Google Colab
plt.rcParams['font.serif'] = ['DejaVu Serif', 'Bitstream Vera Serif', 'Computer Modern Roman', 'New Century Schoolbook', 'Century Schoolbook L', 'Utopia', 'ITC Bookman', 'Bookman', 'Nimbus Roman No9 L', 'Times New Roman', 'Times', 'Palatino', 'Charter', 'serif']
plt.rcParams['font.size'] = 12
plt.rcParams['axes.linewidth'] = 1.2
plt.rcParams['axes.labelsize'] = 14
plt.rcParams['axes.titlesize'] = 16
plt.rcParams['xtick.labelsize'] = 12
plt.rcParams['ytick.labelsize'] = 12
plt.rcParams['legend.fontsize'] = 12
plt.rcParams['figure.titlesize'] = 18
plt.rcParams['figure.dpi'] = 300

# Research Objective
# This study investigates the relationship between weather conditions (temperature extremes
# and precipitation) and public transit ridership in Philadelphia across different modes of
# transportation. The analysis aims to identify how extreme weather events impact
# transportation usage patterns, with implications for transit planning and climate resilience.

# Load the datasets
print("Loading datasets...")
weather_data = pd.read_csv('/content/weather_data.csv')
ridership_data = pd.read_csv('/content/Jan19_to_2024.csv')
socioeconomic_data = pd.read_csv('/content/social_economic_data_rideship.csv')

# Display basic information
print(f"Weather data dimensions: {weather_data.shape}")
print(f"Ridership data dimensions: {ridership_data.shape}")
print(f"Socioeconomic data dimensions: {socioeconomic_data.shape}")

# Preview each dataset
fig, axes = plt.subplots(3, 1, figsize=(12, 18))
fig.suptitle('Dataset Preview', fontsize=20, y=0.95)

# Weather data
axes[0].axis('off')
axes[0].set_title('Weather Data Sample', fontsize=16)
weather_info = weather_data[['STATION', 'NAME', 'DATE', 'PRCP', 'SNWD', 'TMAX', 'TMIN']].head(5).to_string()
axes[0].text(0.01, 0.99, f"Weather data shape: {weather_data.shape}\n\n{weather_info}",
             transform=axes[0].transAxes, fontsize=12, verticalalignment='top',
             family='monospace')

# Ridership data
axes[1].axis('off')
axes[1].set_title('Ridership Data Sample', fontsize=16)
ridership_info = ridership_data.head(5).to_string()
axes[1].text(0.01, 0.99, f"Ridership data shape: {ridership_data.shape}\n\n{ridership_info}",
             transform=axes[1].transAxes, fontsize=12, verticalalignment='top',
             family='monospace')

# Socioeconomic data
axes[2].axis('off')
axes[2].set_title('Socioeconomic Data Sample', fontsize=16)
socio_info = socioeconomic_data[['CTFIPS', 'Total_Population', 'Median_income', 'Rent_to_Income']].head(5).to_string()
axes[2].text(0.01, 0.99, f"Socioeconomic data shape: {socioeconomic_data.shape}\n\n{socio_info}",
             transform=axes[2].transAxes, fontsize=12, verticalalignment='top',
             family='monospace')

plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.savefig('figure1_data_preview.png', dpi=300, bbox_inches='tight')
plt.show()

# 2.1 Data Preprocessing
print("Processing weather data...")
weather_data['DATE'] = pd.to_datetime(weather_data['DATE'])
weather_data['Year'] = weather_data['DATE'].dt.year
weather_data['Month'] = weather_data['DATE'].dt.month
weather_data['Month_Name'] = weather_data['DATE'].dt.strftime('%B')
weather_data['Season'] = pd.cut(
    weather_data['Month'],
    bins=[0, 3, 6, 9, 12],
    labels=['Winter', 'Spring', 'Summer', 'Fall'],
    ordered=True
)

# Check for missing values
print("\nMissing values in critical columns:")
print(weather_data[['DATE', 'PRCP', 'TMAX', 'TMIN']].isnull().sum())

# 2.2 Define Extreme Weather Events
def define_extreme_weather_events(df, hot_percentile=90, cold_percentile=10, precip_percentile=90):
    """
    Define extreme weather events based on percentile thresholds.

    Parameters:
    -----------
    df : pandas.DataFrame
        Weather data with columns 'TMAX', 'TMIN', 'PRCP', 'DATE'
    hot_percentile : float
        Percentile threshold for defining extremely hot days (default: 90)
    cold_percentile : float
        Percentile threshold for defining extremely cold days (default: 10)
    precip_percentile : float
        Percentile threshold for defining heavy precipitation days (default: 90)

    Returns:
    --------
    pandas.DataFrame
        Weather data with added extreme event indicators
    dict
        Thresholds used for defining extreme events
    """
    # Create a copy to avoid modifying the original
    df_extremes = df.copy()

    # Calculate thresholds
    tmax_threshold = np.percentile(df_extremes['TMAX'], hot_percentile)
    tmin_threshold = np.percentile(df_extremes['TMAX'], cold_percentile)

    # Heavy precipitation threshold (non-zero precipitation days)
    prcp_non_zero = df_extremes.loc[df_extremes['PRCP'] > 0, 'PRCP']
    prcp_threshold = np.percentile(prcp_non_zero, precip_percentile)

    # Create indicator variables
    df_extremes['VERY_HOT'] = (df_extremes['TMAX'] >= tmax_threshold).astype(int)
    df_extremes['VERY_COLD'] = (df_extremes['TMAX'] <= tmin_threshold).astype(int)
    df_extremes['HEAVY_PRECIP'] = (df_extremes['PRCP'] >= prcp_threshold).astype(int)

    # Identify consecutive extreme days
    df_extremes['CONSEC_HOT'] = ((df_extremes['VERY_HOT'] == 1) &
                               (df_extremes['VERY_HOT'].shift(1) == 1)).astype(int)
    df_extremes['CONSEC_COLD'] = ((df_extremes['VERY_COLD'] == 1) &
                                (df_extremes['VERY_COLD'].shift(1) == 1)).astype(int)
    df_extremes['CONSEC_PRECIP'] = ((df_extremes['HEAVY_PRECIP'] == 1) &
                                  (df_extremes['HEAVY_PRECIP'].shift(1) == 1)).astype(int)

    # Create heat wave and cold wave indicators (3+ consecutive days)
    df_extremes['HEATWAVE'] = 0
    df_extremes['COLDWAVE'] = 0

    # Find sequences of 3 or more consecutive hot/cold days
    hot_count = 0
    cold_count = 0

    for i in range(len(df_extremes)):
        if df_extremes.iloc[i]['VERY_HOT'] == 1:
            hot_count += 1
        else:
            hot_count = 0

        if df_extremes.iloc[i]['VERY_COLD'] == 1:
            cold_count += 1
        else:
            cold_count = 0

        if hot_count >= 3:
            df_extremes.iloc[i, df_extremes.columns.get_loc('HEATWAVE')] = 1

        if cold_count >= 3:
            df_extremes.iloc[i, df_extremes.columns.get_loc('COLDWAVE')] = 1

    # Initialize PRECIPWAVE column with zeros
    df_extremes['PRECIPWAVE'] = 0

    # Count heavy precipitation days by month and year
    monthly_precip_counts = df_extremes.groupby(['Year', 'Month'])['HEAVY_PRECIP'].sum().reset_index()

    # Identify months with 3 or more heavy precipitation days
    precip_wave_months = monthly_precip_counts[monthly_precip_counts['HEAVY_PRECIP'] >= 3][['Year', 'Month']]

    # Mark all days in those months as PRECIPWAVE
    if not precip_wave_months.empty:
        for _, row in precip_wave_months.iterrows():
            year, month = row['Year'], row['Month']
            mask = (df_extremes['Year'] == year) & (df_extremes['Month'] == month)
            df_extremes.loc[mask, 'PRECIPWAVE'] = 1

    # Document the thresholds used
    thresholds = {
        'hot_threshold': tmax_threshold,
        'cold_threshold': tmin_threshold,
        'precipitation': prcp_threshold
    }

    print("\nExtreme Weather Thresholds:")
    print(f"Hot Day Threshold (≥ {hot_percentile}th percentile): {thresholds['hot_threshold']:.1f}°F")
    print(f"Cold Day Threshold (≤ {cold_percentile}th percentile): {thresholds['cold_threshold']:.1f}°F")
    print(f"Heavy Precipitation Threshold (≥ {precip_percentile}th percentile of rainy days): {thresholds['precipitation']:.2f} inches")

    print("\nExtreme Weather Event Statistics:")
    print(f"Very Hot Days: {df_extremes['VERY_HOT'].sum()} ({df_extremes['VERY_HOT'].mean()*100:.1f}% of days)")
    print(f"Very Cold Days: {df_extremes['VERY_COLD'].sum()} ({df_extremes['VERY_COLD'].mean()*100:.1f}% of days)")
    print(f"Heavy Precipitation Days: {df_extremes['HEAVY_PRECIP'].sum()} ({df_extremes['HEAVY_PRECIP'].mean()*100:.1f}% of days)")
    print(f"Heat Wave Days (3+ consecutive hot days): {df_extremes['HEATWAVE'].sum()} ({df_extremes['HEATWAVE'].mean()*100:.1f}% of days)")
    print(f"Cold Wave Days (3+ consecutive cold days): {df_extremes['COLDWAVE'].sum()} ({df_extremes['COLDWAVE'].mean()*100:.1f}% of days)")
    print(f"Precipitation Wave Days (months with 3+ heavy precip days): {df_extremes['PRECIPWAVE'].sum()} ({df_extremes['PRECIPWAVE'].mean()*100:.1f}% of days)")

    return df_extremes, thresholds

# Apply extreme weather definition
weather_with_extremes, weather_thresholds = define_extreme_weather_events(
    weather_data,
    hot_percentile=90,
    cold_percentile=10,
    precip_percentile=90
)

# Add this after applying the extreme weather definition
import calendar
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
import numpy as np
from matplotlib.gridspec import GridSpec

# Set academic-quality plotting styles
plt.style.use('seaborn-v0_8-whitegrid')
plt.rcParams['font.family'] = 'sans-serif'
plt.rcParams['font.serif'] = ['DejaVu Serif', 'Bitstream Vera Serif', 'Computer Modern Roman', 'New Century Schoolbook', 'Century Schoolbook L', 'Utopia', 'ITC Bookman', 'Bookman', 'Nimbus Roman No9 L', 'Times New Roman', 'Times', 'Palatino', 'Charter', 'serif']
plt.rcParams['font.size'] = 12
plt.rcParams['axes.titlesize'] = 14
plt.rcParams['xtick.labelsize'] = 10
plt.rcParams['ytick.labelsize'] = 10
plt.rcParams['legend.fontsize'] = 10
plt.rcParams['figure.titlesize'] = 16

# Function to count event days and distinct events by month
def count_wave_events(weather_data, wave_column):
    event_months = []

    for year in weather_data['Year'].unique():
        for month in range(1, 13):
            # Filter data for this month and year
            month_data = weather_data[(weather_data['Year'] == year) &
                                      (weather_data['Month'] == month)]

            if len(month_data) == 0:
                continue

            # Count days that are part of a wave in this month
            days_count = month_data[wave_column].sum()

            # Skip months with fewer than 3 wave days
            if days_count < 3:
                continue

            # Count separate wave events
            event_count = 0
            in_event = False

            for i, row in month_data.iterrows():
                if row[wave_column] == 1:
                    if not in_event:  # Start of a new event
                        event_count += 1
                        in_event = True
                else:
                    in_event = False

            # Only add months with at least one event
            if event_count > 0:
                event_months.append({
                    'Year': year,
                    'Month': month,
                    'Month_Name': calendar.month_name[month],
                    'days_count': days_count,
                    'events_count': event_count
                })

    return pd.DataFrame(event_months) if event_months else pd.DataFrame()

# ----- HEAT WAVE ANALYSIS -----
heat_wave_stats = count_wave_events(weather_with_extremes, 'HEATWAVE')

# ----- COLD WAVE ANALYSIS -----
cold_wave_stats = count_wave_events(weather_with_extremes, 'COLDWAVE')

# ----- PRECIPITATION WAVE ANALYSIS -----
# Extract months with Precipitation Waves and count heavy precipitation days
precip_wave_months = []

for year in weather_with_extremes['Year'].unique():
    for month in range(1, 13):
        # Filter data for this year and month
        month_data = weather_with_extremes[(weather_with_extremes['Year'] == year) &
                                          (weather_with_extremes['Month'] == month)]

        if len(month_data) == 0:
            continue

        # Count heavy precipitation days in this month
        heavy_precip_count = month_data['HEAVY_PRECIP'].sum()

        # Only include months with 3+ heavy precipitation days
        if heavy_precip_count >= 3:
            precip_wave_months.append({
                'Year': year,
                'Month': month,
                'Month_Name': calendar.month_name[month],
                'days_count': heavy_precip_count,
                'events_count': 1  # Each month with 3+ heavy precip days is one event
            })

# Convert to DataFrame
precip_wave_stats = pd.DataFrame(precip_wave_months)

# Print summary
print("\nMonths with Heat Waves (showing both days and events):")
print(heat_wave_stats)

print("\nMonths with Cold Waves (showing both days and events):")
print(cold_wave_stats)

print("\nMonths with Precipitation Waves (showing days and events):")
print(precip_wave_stats)

# Find months with all three types of extreme events
print("\nMonths with all three types of extreme events (Heat Wave, Cold Wave, and Precipitation Wave):")

# Create sets of (year, month) tuples for each event type
heat_wave_set = set(zip(heat_wave_stats['Year'], heat_wave_stats['Month'])) if not heat_wave_stats.empty else set()
cold_wave_set = set(zip(cold_wave_stats['Year'], cold_wave_stats['Month'])) if not cold_wave_stats.empty else set()
precip_wave_set = set(zip(precip_wave_stats['Year'], precip_wave_stats['Month'])) if not precip_wave_stats.empty else set()

# Find the intersection of all three sets
all_extreme_months = heat_wave_set.intersection(cold_wave_set, precip_wave_set)

# Convert to a readable format
if all_extreme_months:
    for year, month in sorted(all_extreme_months):
        print(f"{calendar.month_name[month]} {year}")
else:
    print("No months had all three types of extreme events.")

# ===== ACADEMIC PLOTS =====

# Create date columns for better time series plotting
def add_date_column(df):
    if df.empty:
        return df
    df = df.copy()
    df['Date'] = pd.to_datetime([f"{year}-{month:02d}-15" for year, month in zip(df['Year'], df['Month'])])
    return df

heat_wave_stats = add_date_column(heat_wave_stats)
cold_wave_stats = add_date_column(cold_wave_stats)
precip_wave_stats = add_date_column(precip_wave_stats)

# Create a comprehensive multi-panel figure
plt.figure(figsize=(15, 12))
gs = GridSpec(3, 2, figure=plt.gcf())

# Time series of event counts (left panels)
ax1 = plt.subplot(gs[0, 0])
ax2 = plt.subplot(gs[1, 0])
ax3 = plt.subplot(gs[2, 0])

# Distribution of events by month (right panels)
ax4 = plt.subplot(gs[0, 1])
ax5 = plt.subplot(gs[1, 1])
ax6 = plt.subplot(gs[2, 1])

# Time series of heat wave events
if not heat_wave_stats.empty:
    ax1.plot(heat_wave_stats['Date'], heat_wave_stats['events_count'], 'r-', marker='o', linewidth=1.5)
    ax1.set_ylabel('Number of Heat Wave\nEvents')
    ax1.set_title('Heat Wave Events Over Time')
    ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
    ax1.xaxis.set_major_locator(mdates.YearLocator(2))  # Every 2 years
    plt.setp(ax1.get_xticklabels(), rotation=45, ha='right')
else:
    ax1.text(0.5, 0.5, 'No heat wave data available', horizontalalignment='center', transform=ax1.transAxes)

# Time series of cold wave events
if not cold_wave_stats.empty:
    ax2.plot(cold_wave_stats['Date'], cold_wave_stats['events_count'], 'b-', marker='o', linewidth=1.5)
    ax2.set_ylabel('Number of Cold Wave\nEvents')
    ax2.set_title('Cold Wave Events Over Time')
    ax2.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
    ax2.xaxis.set_major_locator(mdates.YearLocator(2))
    plt.setp(ax2.get_xticklabels(), rotation=45, ha='right')
else:
    ax2.text(0.5, 0.5, 'No cold wave data available', horizontalalignment='center', transform=ax2.transAxes)

# Time series of precipitation wave events
if not precip_wave_stats.empty:
    ax3.plot(precip_wave_stats['Date'], precip_wave_stats['events_count'], 'g-', marker='o', linewidth=1.5)
    ax3.set_ylabel('Number of Precipitation Wave\nEvents')
    ax3.set_title('Precipitation Wave Events Over Time')
    ax3.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
    ax3.xaxis.set_major_locator(mdates.YearLocator(2))
    plt.setp(ax3.get_xticklabels(), rotation=45, ha='right')
    ax3.set_xlabel('Year')
else:
    ax3.text(0.5, 0.5, 'No precipitation wave data available', horizontalalignment='center', transform=ax3.transAxes)

# Monthly distribution of heat waves
if not heat_wave_stats.empty:
    monthly_heat = heat_wave_stats.groupby('Month')['events_count'].sum()
    ax4.bar(monthly_heat.index, monthly_heat.values, color='red', alpha=0.7)
    ax4.set_ylabel('Total Number of\nHeat Wave Events')
    ax4.set_title('Heat Wave Events by Month')
    ax4.set_xticks(range(1, 13))
    ax4.set_xticklabels([calendar.month_abbr[i] for i in range(1, 13)])
else:
    ax4.text(0.5, 0.5, 'No heat wave data available', horizontalalignment='center', transform=ax4.transAxes)

# Monthly distribution of cold waves
if not cold_wave_stats.empty:
    monthly_cold = cold_wave_stats.groupby('Month')['events_count'].sum()
    ax5.bar(monthly_cold.index, monthly_cold.values, color='blue', alpha=0.7)
    ax5.set_ylabel('Total Number of\nCold Wave Events')
    ax5.set_title('Cold Wave Events by Month')
    ax5.set_xticks(range(1, 13))
    ax5.set_xticklabels([calendar.month_abbr[i] for i in range(1, 13)])
else:
    ax5.text(0.5, 0.5, 'No cold wave data available', horizontalalignment='center', transform=ax5.transAxes)

# Monthly distribution of precipitation waves
if not precip_wave_stats.empty:
    monthly_precip = precip_wave_stats.groupby('Month')['events_count'].sum()
    ax6.bar(monthly_precip.index, monthly_precip.values, color='green', alpha=0.7)
    ax6.set_ylabel('Total Number of\nPrecipitation Wave Events')
    ax6.set_title('Precipitation Wave Events by Month')
    ax6.set_xticks(range(1, 13))
    ax6.set_xticklabels([calendar.month_abbr[i] for i in range(1, 13)])
    ax6.set_xlabel('Month')
else:
    ax6.text(0.5, 0.5, 'No precipitation wave data available', horizontalalignment='center', transform=ax6.transAxes)

plt.suptitle('Extreme Weather Events Analysis', fontsize=16, fontweight='bold')
plt.tight_layout()
plt.subplots_adjust(top=0.93)
plt.savefig('extreme_weather_events.png', dpi=300, bbox_inches='tight')
plt.savefig('extreme_weather_events.pdf', bbox_inches='tight')
plt.show()

# Create a second figure showing the relationship between days and events
plt.figure(figsize=(15, 12))

# First row: Heat Waves
if not heat_wave_stats.empty:
    ax1 = plt.subplot(3, 3, 1)
    sns.scatterplot(x='days_count', y='events_count', data=heat_wave_stats, color='red', s=50, alpha=0.7, ax=ax1)
    ax1.set_title('Heat Wave Days vs Events')
    ax1.set_xlabel('Number of Heat Wave Days')
    ax1.set_ylabel('Number of Heat Wave Events')

    ax2 = plt.subplot(3, 3, 2)
    yearly_heat_days = heat_wave_stats.groupby('Year')['days_count'].sum().reset_index()
    yearly_heat_events = heat_wave_stats.groupby('Year')['events_count'].sum().reset_index()
    ax2.plot(yearly_heat_days['Year'], yearly_heat_days['days_count'], 'r-', marker='o', label='Days')
    ax2.set_ylabel('Number of Heat Wave Days', color='r')
    ax2.tick_params(axis='y', labelcolor='r')
    ax2.set_xlabel('Year')
    ax2_twin = ax2.twinx()
    ax2_twin.plot(yearly_heat_events['Year'], yearly_heat_events['events_count'], 'r--', marker='s', label='Events')
    ax2_twin.set_ylabel('Number of Heat Wave Events', color='darkred')
    ax2_twin.tick_params(axis='y', labelcolor='darkred')
    ax2.set_title('Yearly Heat Wave Days and Events')

    ax3 = plt.subplot(3, 3, 3)
    if len(heat_wave_stats['Year'].unique()) > 1:
        yearly_avg_event_length = heat_wave_stats.groupby('Year').apply(lambda x: x['days_count'].sum() / x['events_count'].sum() if x['events_count'].sum() > 0 else 0).reset_index(name='avg_length')
        ax3.plot(yearly_avg_event_length['Year'], yearly_avg_event_length['avg_length'], 'r-', marker='D')
        ax3.set_ylabel('Average Heat Wave Length (Days)')
        ax3.set_xlabel('Year')
        ax3.set_title('Average Heat Wave Duration')
    else:
        ax3.text(0.5, 0.5, 'Insufficient data for trend analysis', horizontalalignment='center', transform=ax3.transAxes)

# Second row: Cold Waves
if not cold_wave_stats.empty:
    ax4 = plt.subplot(3, 3, 4)
    sns.scatterplot(x='days_count', y='events_count', data=cold_wave_stats, color='blue', s=50, alpha=0.7, ax=ax4)
    ax4.set_title('Cold Wave Days vs Events')
    ax4.set_xlabel('Number of Cold Wave Days')
    ax4.set_ylabel('Number of Cold Wave Events')

    ax5 = plt.subplot(3, 3, 5)
    yearly_cold_days = cold_wave_stats.groupby('Year')['days_count'].sum().reset_index()
    yearly_cold_events = cold_wave_stats.groupby('Year')['events_count'].sum().reset_index()
    ax5.plot(yearly_cold_days['Year'], yearly_cold_days['days_count'], 'b-', marker='o', label='Days')
    ax5.set_ylabel('Number of Cold Wave Days', color='b')
    ax5.tick_params(axis='y', labelcolor='b')
    ax5.set_xlabel('Year')
    ax5_twin = ax5.twinx()
    ax5_twin.plot(yearly_cold_events['Year'], yearly_cold_events['events_count'], 'b--', marker='s', label='Events')
    ax5_twin.set_ylabel('Number of Cold Wave Events', color='darkblue')
    ax5_twin.tick_params(axis='y', labelcolor='darkblue')
    ax5.set_title('Yearly Cold Wave Days and Events')

    ax6 = plt.subplot(3, 3, 6)
    if len(cold_wave_stats['Year'].unique()) > 1:
        yearly_avg_event_length = cold_wave_stats.groupby('Year').apply(lambda x: x['days_count'].sum() / x['events_count'].sum() if x['events_count'].sum() > 0 else 0).reset_index(name='avg_length')
        ax6.plot(yearly_avg_event_length['Year'], yearly_avg_event_length['avg_length'], 'b-', marker='D')
        ax6.set_ylabel('Average Cold Wave Length (Days)')
        ax6.set_xlabel('Year')
        ax6.set_title('Average Cold Wave Duration')
    else:
        ax6.text(0.5, 0.5, 'Insufficient data for trend analysis', horizontalalignment='center', transform=ax6.transAxes)

# Third row: Precipitation Waves
if not precip_wave_stats.empty:
    ax7 = plt.subplot(3, 3, 7)
    sns.scatterplot(x='days_count', y='events_count', data=precip_wave_stats, color='green', s=50, alpha=0.7, ax=ax7)
    ax7.set_title('Precipitation Wave Days vs Events')
    ax7.set_xlabel('Number of Heavy Precipitation Days')
    ax7.set_ylabel('Number of Precipitation Wave Events')

    ax8 = plt.subplot(3, 3, 8)
    yearly_precip_days = precip_wave_stats.groupby('Year')['days_count'].sum().reset_index()
    yearly_precip_events = precip_wave_stats.groupby('Year')['events_count'].sum().reset_index()
    ax8.plot(yearly_precip_days['Year'], yearly_precip_days['days_count'], 'g-', marker='o', label='Days')
    ax8.set_ylabel('Number of Heavy Precip Days', color='g')
    ax8.tick_params(axis='y', labelcolor='g')
    ax8.set_xlabel('Year')
    ax8_twin = ax8.twinx()
    ax8_twin.plot(yearly_precip_events['Year'], yearly_precip_events['events_count'], 'g--', marker='s', label='Events')
    ax8_twin.set_ylabel('Number of Precip Wave Months', color='darkgreen')
    ax8_twin.tick_params(axis='y', labelcolor='darkgreen')
    ax8.set_title('Yearly Heavy Precipitation Days and Wave Months')

    ax9 = plt.subplot(3, 3, 9)
    if len(precip_wave_stats['Year'].unique()) > 1:
        yearly_avg_days_per_month = precip_wave_stats.groupby('Year').apply(lambda x: x['days_count'].sum() / x['events_count'].sum() if x['events_count'].sum() > 0 else 0).reset_index(name='avg_days')
        ax9.plot(yearly_avg_days_per_month['Year'], yearly_avg_days_per_month['avg_days'], 'g-', marker='D')
        ax9.set_ylabel('Avg Heavy Precip Days per Wave Month')
        ax9.set_xlabel('Year')
        ax9.set_title('Average Heavy Precipitation Days per Wave Month')
    else:
        ax9.text(0.5, 0.5, 'Insufficient data for trend analysis', horizontalalignment='center', transform=ax9.transAxes)

plt.suptitle('Detailed Analysis of Extreme Weather Events', fontsize=16, fontweight='bold')
plt.tight_layout()
plt.subplots_adjust(top=0.93)
plt.savefig('extreme_weather_detailed.png', dpi=300, bbox_inches='tight')
plt.savefig('extreme_weather_detailed.pdf', bbox_inches='tight')
plt.show()

# 3.1 Visualize Weather Distributions
fig, axes = plt.subplots(2, 2, figsize=(14, 12))
fig.suptitle('Weather Distributions in Philadelphia (2019-Present)', fontsize=20)

# Distribution of TMAX with thresholds
ax = axes[0, 0]
sns.histplot(weather_data['TMAX'], bins=40, kde=True,
             color='steelblue', alpha=0.7, ax=ax)
ax.axvline(x=weather_thresholds['hot_threshold'], color='crimson',
           linestyle='--', linewidth=2,
           label=f'Hot Day Threshold: {weather_thresholds["hot_threshold"]:.1f}°F')
ax.axvline(x=weather_thresholds['cold_threshold'], color='dodgerblue',
           linestyle='--', linewidth=2,
           label=f'Cold Day Threshold: {weather_thresholds["cold_threshold"]:.1f}°F')
ax.set_title('Distribution of Daily Maximum Temperature', fontsize=16)
ax.set_xlabel('Maximum Temperature (°F)', fontsize=14)
ax.set_ylabel('Frequency', fontsize=14)
ax.grid(True, linestyle='--', alpha=0.7)
ax.legend(frameon=True, fontsize=12)

# Distribution of PRCP with threshold (non-zero only)
ax = axes[0, 1]
prcp_non_zero = weather_data[weather_data['PRCP'] > 0]['PRCP']
sns.histplot(prcp_non_zero, bins=40, kde=True,
             color='forestgreen', alpha=0.7, ax=ax)
ax.axvline(x=weather_thresholds['precipitation'], color='darkred',
           linestyle='--', linewidth=2,
           label=f'Heavy Precipitation Threshold: {weather_thresholds["precipitation"]:.2f} inches')
ax.set_title('Distribution of Daily Precipitation (Non-Zero Days)', fontsize=16)
ax.set_xlabel('Precipitation (inches)', fontsize=14)
ax.set_ylabel('Frequency', fontsize=14)
ax.grid(True, linestyle='--', alpha=0.7)
ax.set_xlim(0, min(max(prcp_non_zero), weather_thresholds['precipitation']*1))
ax.legend(frameon=True, fontsize=12)

# Time series of extreme hot/cold days by month
ax = axes[1, 0]
monthly_hot_cold = weather_with_extremes.groupby(['Year', 'Month']).agg({
    'VERY_HOT': 'sum',
    'VERY_COLD': 'sum'
}).reset_index()
monthly_hot_cold['YearMonth'] = pd.to_datetime(monthly_hot_cold['Year'].astype(str) + '-' +
                                              monthly_hot_cold['Month'].astype(str) + '-01')

ax.plot(monthly_hot_cold['YearMonth'], monthly_hot_cold['VERY_HOT'],
        color='crimson', marker='o', label='Very Hot Days')
ax.plot(monthly_hot_cold['YearMonth'], monthly_hot_cold['VERY_COLD'],
        color='dodgerblue', marker='s', label='Very Cold Days')
ax.set_title('Monthly Extreme Temperature Days', fontsize=16)
ax.set_xlabel('Month', fontsize=14)
ax.set_ylabel('Number of Days', fontsize=14)
ax.grid(True, linestyle='--', alpha=0.7)
ax.legend(frameon=True, fontsize=12)
ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
ax.tick_params(axis='x', rotation=45)

# Time series of heavy precipitation days by month
ax = axes[1, 1]
monthly_precip = weather_with_extremes.groupby(['Year', 'Month']).agg({
    'HEAVY_PRECIP': 'sum',
    'PRCP': 'sum'
}).reset_index()
monthly_precip['YearMonth'] = pd.to_datetime(monthly_precip['Year'].astype(str) + '-' +
                                           monthly_precip['Month'].astype(str) + '-01')

ax2 = ax.twinx()
ax.bar(monthly_precip['YearMonth'], monthly_precip['PRCP'],
      color='lightblue', alpha=0.4, label='Total Precipitation')
ax2.plot(monthly_precip['YearMonth'], monthly_precip['HEAVY_PRECIP'],
        color='darkgreen', marker='o', linewidth=2, label='Heavy Precipitation Days')
ax.set_title('Monthly Precipitation Patterns', fontsize=16)
ax.set_xlabel('Month', fontsize=14)
ax.set_ylabel('Total Precipitation (inches)', fontsize=14, color='navy')
ax2.set_ylabel('Heavy Precipitation Days', fontsize=14, color='darkgreen')
ax.grid(True, linestyle='--', alpha=0.7)
ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
ax.tick_params(axis='x', rotation=45)

# Add a joint legend
lines1, labels1 = ax.get_legend_handles_labels()
lines2, labels2 = ax2.get_legend_handles_labels()
ax2.legend(lines1 + lines2, labels1 + labels2, loc='upper right', frameon=True, fontsize=12)

plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.savefig('figure2_weather_distributions.png', dpi=300, bbox_inches='tight')
plt.show()

# 3.2 Visualize Extreme Weather Events Time Series
plt.figure(figsize=(18, 12))

# Plot temperature extremes with heat/cold waves
plt.subplot(3, 1, 1)
plt.plot(weather_with_extremes['DATE'], weather_with_extremes['TMAX'],
         'steelblue', alpha=0.3, linewidth=0.8)
plt.scatter(weather_with_extremes.loc[weather_with_extremes['VERY_HOT']==1, 'DATE'],
            weather_with_extremes.loc[weather_with_extremes['VERY_HOT']==1, 'TMAX'],
            color='crimson', marker='o', s=30, alpha=0.7, label='Very Hot Days')
plt.scatter(weather_with_extremes.loc[weather_with_extremes['HEATWAVE']==1, 'DATE'],
            weather_with_extremes.loc[weather_with_extremes['HEATWAVE']==1, 'TMAX'],
            color='darkred', marker='*', s=100, alpha=0.9, label='Heat Wave (3+ days)')

plt.axhline(y=weather_thresholds['hot_threshold'], color='crimson',
           linestyle='--', alpha=0.8, linewidth=1.5, label='Hot Day Threshold')
plt.ylabel('Maximum Temperature (°F)', fontsize=14)
plt.title('Extreme Heat Events (2019-Present)', fontsize=16)
plt.grid(True, linestyle='--', alpha=0.7)
plt.legend(loc='upper right', frameon=True, fontsize=12)

# Plot cold extremes
plt.subplot(3, 1, 2)
plt.plot(weather_with_extremes['DATE'], weather_with_extremes['TMAX'],
         'steelblue', alpha=0.3, linewidth=0.8)
plt.scatter(weather_with_extremes.loc[weather_with_extremes['VERY_COLD']==1, 'DATE'],
            weather_with_extremes.loc[weather_with_extremes['VERY_COLD']==1, 'TMAX'],
            color='dodgerblue', marker='o', s=30, alpha=0.7, label='Very Cold Days')
plt.scatter(weather_with_extremes.loc[weather_with_extremes['COLDWAVE']==1, 'DATE'],
            weather_with_extremes.loc[weather_with_extremes['COLDWAVE']==1, 'TMAX'],
            color='darkblue', marker='*', s=100, alpha=0.9, label='Cold Wave (3+ days)')

plt.axhline(y=weather_thresholds['cold_threshold'], color='dodgerblue',
           linestyle='--', alpha=0.8, linewidth=1.5, label='Cold Day Threshold')
plt.ylabel('Maximum Temperature (°F)', fontsize=14)
plt.title('Extreme Cold Events (2019-Present)', fontsize=16)
plt.grid(True, linestyle='--', alpha=0.7)
plt.legend(loc='upper right', frameon=True, fontsize=12)

# Plot precipitation extremes
plt.subplot(3, 1, 3)
plt.plot(weather_with_extremes['DATE'], weather_with_extremes['PRCP'],
         'steelblue', alpha=0.3, linewidth=0.8)
plt.scatter(weather_with_extremes.loc[weather_with_extremes['HEAVY_PRECIP']==1, 'DATE'],
            weather_with_extremes.loc[weather_with_extremes['HEAVY_PRECIP']==1, 'PRCP'],
            color='darkgreen', marker='o', s=30, alpha=0.7, label='Heavy Precipitation')
plt.scatter(weather_with_extremes.loc[weather_with_extremes['CONSEC_PRECIP']==1, 'DATE'],
            weather_with_extremes.loc[weather_with_extremes['CONSEC_PRECIP']==1, 'PRCP'],
            color='purple', marker='*', s=100, alpha=0.9, label='Consecutive Heavy Precip')

plt.axhline(y=weather_thresholds['precipitation'], color='darkgreen',
           linestyle='--', alpha=0.8, linewidth=1.5, label='Heavy Precip Threshold')
plt.ylabel('Precipitation (inches)', fontsize=14)
plt.xlabel('Date', fontsize=14)
plt.title('Heavy Precipitation Events (2019-Present)', fontsize=16)
plt.grid(True, linestyle='--', alpha=0.7)
plt.legend(loc='upper right', frameon=True, fontsize=12)

plt.tight_layout()
plt.savefig('figure3_extreme_weather_timeseries.png', dpi=300, bbox_inches='tight')
plt.show()

"""
Weather Extremes Analysis
-------------------------
This script analyzes historical weather data to identify and visualize extreme weather patterns
including very hot days, very cold days, heavy precipitation, and consecutive extreme events.

Author: Academic Research Team
Date: 2025-04-22
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
from scipy import stats
from datetime import datetime
import matplotlib.ticker as ticker
from matplotlib.colors import LinearSegmentedColormap
import matplotlib.gridspec as gridspec
from google.colab import files
import io
import warnings
warnings.filterwarnings("ignore")

# Set the aesthetics for plots
plt.style.use('seaborn-v0_8-whitegrid')
sns.set_context("notebook", font_scale=1.2)

# Custom color palettes for different visualizations
temp_cmap = LinearSegmentedColormap.from_list('temp_cmap', ['darkblue', 'lightblue', 'yellow', 'orange', 'red'])
precip_cmap = LinearSegmentedColormap.from_list('precip_cmap', ['white', 'lightskyblue', 'royalblue', 'darkblue'])

def load_weather_data():
    """
    Load weather data from a CSV file uploaded by the user.
    Returns a cleaned pandas DataFrame with the weather data.
    """
    print("Please upload your weather data CSV file.")
    uploaded = files.upload()

    for fn in uploaded.keys():
        print(f'User uploaded file "{fn}" with length {len(uploaded[fn])} bytes')

        # Read the CSV data
        df = pd.read_csv(io.StringIO(uploaded[fn].decode('utf-8')))

        # Basic data cleaning
        # Convert date string to datetime
        df['DATE'] = pd.to_datetime(df['DATE'])

        # Extract year and month for aggregation
        df['Year'] = df['DATE'].dt.year
        df['Month'] = df['DATE'].dt.month
        df['YearMonth'] = pd.to_datetime(df['Year'].astype(str) + '-' + df['Month'].astype(str).str.zfill(2) + '-01')
        df['DayOfYear'] = df['DATE'].dt.dayofyear

        # Handle missing values
        for col in ['TMAX', 'TMIN', 'PRCP']:
            if col in df.columns:
                df[col] = df[col].replace(-9999, np.nan)  # Common missing value indicator

        print(f"Data loaded successfully with {df.shape[0]} records from {df['DATE'].min()} to {df['DATE'].max()}")

        # Return the first uploaded file
        return df

    # If no file was uploaded
    print("No file was uploaded. Please run the cell again and upload a file.")
    return None

def define_extreme_weather_events(df, temp_hot_threshold=95, temp_cold_threshold=20, precip_threshold=1.0):
    """
    Define extreme weather events based on thresholds.

    Parameters:
    -----------
    df : pandas DataFrame
        Weather data with at least TMAX, TMIN, and PRCP columns
    temp_hot_threshold : float
        Temperature threshold (°F) above which a day is considered very hot
    temp_cold_threshold : float
        Temperature threshold (°F) below which a day is considered very cold
    precip_threshold : float
        Precipitation threshold (inches) above which a day is considered heavy precipitation

    Returns:
    --------
    pandas DataFrame with added columns for extreme weather categories
    """
    # Create copy to avoid SettingWithCopyWarning
    df_extremes = df.copy()

    # Define extreme weather indicators (binary)
    df_extremes['VERY_HOT'] = (df_extremes['TMAX'] > temp_hot_threshold).astype(int)
    df_extremes['VERY_COLD'] = (df_extremes['TMIN'] < temp_cold_threshold).astype(int)
    df_extremes['HEAVY_PRECIP'] = (df_extremes['PRCP'] > precip_threshold).astype(int)

    # Create consecutive day counters
    for condition in ['VERY_HOT', 'VERY_COLD', 'HEAVY_PRECIP']:
        # Initialize consecutive day counter
        consecutive_col = f"CONSEC_{condition}"
        df_extremes[consecutive_col] = 0

        # Track consecutive days
        is_consecutive = False
        consecutive_count = 0

        for i in range(len(df_extremes)):
            if df_extremes[condition].iloc[i] == 1:
                consecutive_count += 1
                is_consecutive = True
            elif is_consecutive:
                # The streak has ended, mark the preceding days
                df_extremes[consecutive_col].iloc[i-consecutive_count:i] = 1
                consecutive_count = 0
                is_consecutive = False
            else:
                consecutive_count = 0

        # Handle case where dataset ends during a streak
        if is_consecutive:
            df_extremes[consecutive_col].iloc[-consecutive_count:] = 1

    # Define heat waves (3+ consecutive very hot days)
    df_extremes['HEATWAVE'] = 0
    # Find runs of 3 or more consecutive hot days
    hot_streak = 0
    for i in range(len(df_extremes)):
        if df_extremes['VERY_HOT'].iloc[i] == 1:
            hot_streak += 1
            if hot_streak >= 3:
                df_extremes['HEATWAVE'].iloc[i-hot_streak+1:i+1] = 1
        else:
            hot_streak = 0

    # Define cold waves (3+ consecutive very cold days)
    df_extremes['COLDWAVE'] = 0
    # Find runs of 3 or more consecutive cold days
    cold_streak = 0
    for i in range(len(df_extremes)):
        if df_extremes['VERY_COLD'].iloc[i] == 1:
            cold_streak += 1
            if cold_streak >= 3:
                df_extremes['COLDWAVE'].iloc[i-cold_streak+1:i+1] = 1
        else:
            cold_streak = 0

    # Define extreme weather category E(i,j) as described in the equation
    # For each month in each year
    df_extremes['MONTH_HOT_DAYS'] = df_extremes.groupby(['Year', 'Month'])['VERY_HOT'].transform('sum')
    df_extremes['MONTH_COLD_DAYS'] = df_extremes.groupby(['Year', 'Month'])['VERY_COLD'].transform('sum')
    df_extremes['MONTH_HEAVY_PRECIP_DAYS'] = df_extremes.groupby(['Year', 'Month'])['HEAVY_PRECIP'].transform('sum')

    # Define τ=5 as the threshold for classifying a month as extreme
    tau = 5

    # Apply the classification rule for E(i,j)
    conditions = [
        df_extremes['MONTH_HEAVY_PRECIP_DAYS'] > tau,
        df_extremes['MONTH_COLD_DAYS'] > tau,
        df_extremes['MONTH_HOT_DAYS'] > tau
    ]
    choices = ["Heavy Precipitation", "Very Cold", "Very Hot"]
    df_extremes['EXTREME_CATEGORY'] = np.select(conditions, choices, default="Normal")

    # Print summary statistics
    print("\nExtreme Weather Event Statistics:")
    print(f"Very Hot Days: {df_extremes['VERY_HOT'].sum()} ({df_extremes['VERY_HOT'].mean()*100:.1f}% of days)")
    print(f"Very Cold Days: {df_extremes['VERY_COLD'].sum()} ({df_extremes['VERY_COLD'].mean()*100:.1f}% of days)")
    print(f"Heavy Precipitation Days: {df_extremes['HEAVY_PRECIP'].sum()} ({df_extremes['HEAVY_PRECIP'].mean()*100:.1f}% of days)")
    print(f"Consecutive Heavy Precipitation Days: {df_extremes['CONSEC_HEAVY_PRECIP'].sum()} ({df_extremes['CONSEC_HEAVY_PRECIP'].mean()*100:.1f}% of days)")
    print(f"Heat Wave Days (3+ consecutive hot days): {df_extremes['HEATWAVE'].sum()} ({df_extremes['HEATWAVE'].mean()*100:.1f}% of days)")
    print(f"Cold Wave Days (3+ consecutive cold days): {df_extremes['COLDWAVE'].sum()} ({df_extremes['COLDWAVE'].mean()*100:.1f}% of days)")

    # Monthly extreme category counts
    monthly_extremes = df_extremes.groupby('EXTREME_CATEGORY').size().reset_index(name='count')
    print("\nMonthly Extreme Categories:")
    for _, row in monthly_extremes.iterrows():
        print(f"{row['EXTREME_CATEGORY']}: {row['count']} month-years ({row['count']/df_extremes['EXTREME_CATEGORY'].nunique():.1f}%)")

    return df_extremes

def visualize_extreme_weather_trends(weather_with_extremes):
    """
    Create comprehensive visualizations of extreme weather patterns.

    Parameters:
    -----------
    weather_with_extremes : pandas DataFrame
        Weather data with extreme weather indicators added
    """
    # Set up a 2x2 grid of subplots for the first figure
    fig, axes = plt.subplots(2, 2, figsize=(20, 16))
    fig.suptitle('Extreme Weather Analysis', fontsize=24, y=0.95)

    # 1. Time series of extreme temperature days
    ax = axes[0, 0]
    yearly_extremes = weather_with_extremes.resample('Y', on='DATE').agg({
        'VERY_HOT': 'sum',
        'VERY_COLD': 'sum',
        'HEATWAVE': 'sum',
        'COLDWAVE': 'sum'
    }).reset_index()

    ax.plot(yearly_extremes['DATE'], yearly_extremes['VERY_HOT'],
            marker='o', linewidth=2, label='Very Hot Days', color='red')
    ax.plot(yearly_extremes['DATE'], yearly_extremes['VERY_COLD'],
            marker='s', linewidth=2, label='Very Cold Days', color='blue')
    ax.plot(yearly_extremes['DATE'], yearly_extremes['HEATWAVE'],
            marker='^', linewidth=2, linestyle='--', label='Heat Wave Days', color='darkred')
    ax.plot(yearly_extremes['DATE'], yearly_extremes['COLDWAVE'],
            marker='d', linewidth=2, linestyle='--', label='Cold Wave Days', color='darkblue')

    ax.set_title('Yearly Extreme Temperature Days', fontsize=16)
    ax.set_xlabel('Year', fontsize=14)
    ax.set_ylabel('Number of Days', fontsize=14)
    ax.grid(True, linestyle='--', alpha=0.7)
    ax.legend(loc='upper left', frameon=True, fontsize=12)

    # 2. Monthly distribution of extreme temperature events
    ax = axes[0, 1]
    monthly_temp_extremes = weather_with_extremes.groupby(weather_with_extremes['DATE'].dt.month).agg({
        'VERY_HOT': 'sum',
        'VERY_COLD': 'sum'
    }).reset_index()

    width = 0.35
    x = np.arange(len(monthly_temp_extremes))
    ax.bar(x - width/2, monthly_temp_extremes['VERY_HOT'], width, label='Very Hot Days', color='orangered')
    ax.bar(x + width/2, monthly_temp_extremes['VERY_COLD'], width, label='Very Cold Days', color='royalblue')

    ax.set_title('Monthly Distribution of Extreme Temperature Days', fontsize=16)
    ax.set_xlabel('Month', fontsize=14)
    ax.set_ylabel('Total Number of Days (All Years)', fontsize=14)
    ax.set_xticks(x)
    ax.set_xticklabels(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
    ax.legend(loc='upper right', frameon=True, fontsize=12)
    ax.grid(axis='y', linestyle='--', alpha=0.7)

    # 3. Time series of heavy precipitation days
    ax = axes[1, 0]
    yearly_precip = weather_with_extremes.resample('Y', on='DATE').agg({
        'HEAVY_PRECIP': 'sum',
        'CONSEC_HEAVY_PRECIP': 'sum',
        'PRCP': 'sum'
    }).reset_index()

    ax2 = ax.twinx()
    ax.bar(yearly_precip['DATE'], yearly_precip['PRCP'],
           color='skyblue', alpha=0.4, label='Total Annual Precipitation')
    ax2.plot(yearly_precip['DATE'], yearly_precip['HEAVY_PRECIP'],
             marker='o', linewidth=2, color='navy', label='Heavy Precipitation Days')
    ax2.plot(yearly_precip['DATE'], yearly_precip['CONSEC_HEAVY_PRECIP'],
             marker='*', linewidth=2, linestyle='--', color='purple',
             label='Consecutive Heavy Precip Days')

    ax.set_title('Yearly Precipitation Patterns', fontsize=16)
    ax.set_xlabel('Year', fontsize=14)
    ax.set_ylabel('Total Precipitation (inches)', fontsize=14, color='royalblue')
    ax2.set_ylabel('Number of Days', fontsize=14, color='navy')
    ax.grid(True, linestyle='--', alpha=0.7)

    # Add a joint legend
    lines1, labels1 = ax.get_legend_handles_labels()
    lines2, labels2 = ax2.get_legend_handles_labels()
    ax2.legend(lines1 + lines2, labels1 + labels2, loc='upper left', frameon=True, fontsize=12)

    # 4. Monthly precipitation patterns
    ax = axes[1, 1]
    monthly_precip = weather_with_extremes.groupby(['Year', 'Month']).agg({
        'HEAVY_PRECIP': 'sum',
        'CONSEC_HEAVY_PRECIP': 'sum',  # Count consecutive heavy precip days
        'PRCP': 'sum'
    }).reset_index()
    monthly_precip['YearMonth'] = pd.to_datetime(monthly_precip['Year'].astype(str) + '-' +
                                               monthly_precip['Month'].astype(str) + '-01')

    ax2 = ax.twinx()
    ax.bar(monthly_precip['YearMonth'], monthly_precip['PRCP'],
          color='lightblue', alpha=0.4, label='Total Precipitation')

    # Plot both heavy

# 4.1 Ridership Data Preprocessing
print("Processing ridership data...")

# Map month names to numbers for consistent joining
month_mapping = {
    'January': 1, 'February': 2, 'March': 3, 'April': 4, 'May': 5, 'June': 6,
    'July': 7, 'August': 8, 'September': 9, 'October': 10, 'November': 11, 'December': 12
}
ridership_data['Month_Num'] = ridership_data['Month'].map(month_mapping)

# Add season information
ridership_data['Season'] = pd.cut(
    ridership_data['Month_Num'],
    bins=[0, 3, 6, 9, 12],
    labels=['Winter', 'Spring', 'Summer', 'Fall'],
    ordered=True
)

# 4.2 Aggregate ridership data by year, month, and mode
monthly_ridership = ridership_data.groupby(['Year', 'Month_Num', 'Month', 'Mode']).agg(
    Total_Ridership=('Ridership', 'sum'),
    Route_Count=('Route', 'nunique')  # Changed to nunique for better accuracy
).reset_index()

print(f"\nRidership data aggregated to {len(monthly_ridership)} month-mode combinations")

# 4.3 Weather data monthly aggregation
monthly_weather = weather_with_extremes.groupby(['Year', 'Month']).agg(
    Very_Hot_Days=('VERY_HOT', 'sum'),
    Very_Cold_Days=('VERY_COLD', 'sum'),
    Heavy_Precip_Days=('HEAVY_PRECIP', 'sum'),
    Heat_Wave_Days=('HEATWAVE', 'sum'),
    Cold_Wave_Days=('COLDWAVE', 'sum'),
    Avg_TMAX=('TMAX', 'mean'),
    Avg_TMIN=('TMIN', 'mean'),
    Total_PRCP=('PRCP', 'sum'),
    Days_With_Rain=('PRCP', lambda x: (x > 0).sum())
).reset_index()

print(f"Weather data aggregated to {len(monthly_weather)} months")

# 4.4 Merge ridership and weather data
merged_data = pd.merge(
    monthly_ridership,
    monthly_weather,
    left_on=['Year', 'Month_Num'],
    right_on=['Year', 'Month'],
    how='inner'
)

# Create date column for time series analysis
merged_data['Date'] = pd.to_datetime(merged_data['Year'].astype(str) + '-' +
                                    merged_data['Month_Num'].astype(str) + '-01')

print(f"Final merged dataset: {merged_data.shape[0]} observations with {merged_data.shape[1]} variables")
print(f"Date range: {merged_data['Date'].min().strftime('%B %Y')} to {merged_data['Date'].max().strftime('%B %Y')}")
print(f"Transportation modes: {', '.join(merged_data['Mode'].unique())}")

# 5.4 Year by Year Ridership Analysis (2019-2024)
plt.figure(figsize=(20, 15))

# Extract year from date
merged_data['Year'] = merged_data['Date'].dt.year

# Create subplots for each year
fig, axes = plt.subplots(2, 3, figsize=(20, 12), sharex=False, sharey=True)
fig.suptitle('Transit Ridership Year by Year (2019-2024)', fontsize=22)

# Flatten the axes array for easier iteration
axes = axes.flatten()

# Get unique years from 2019-2024
years = sorted([year for year in range(2019, 2025) if year in merged_data['Year'].unique()])

# Color mapping for consistent colors across subplots
modes = merged_data['Mode'].unique()
colors = plt.cm.tab10(np.linspace(0, 1, len(modes)))
mode_color_map = dict(zip(modes, colors))

# Plot each year
for i, year in enumerate(years):
    ax = axes[i]
    year_data = merged_data[merged_data['Year'] == year]

    # Plot each mode for this year
    for mode in modes:
        mode_year_data = year_data[year_data['Mode'] == mode]
        if not mode_year_data.empty:
            # Sort by month for proper line plotting
            mode_year_data = mode_year_data.sort_values('Date')
            ax.plot(mode_year_data['Date'], mode_year_data['Total_Ridership'],
                   marker='o', markersize=5, linewidth=2, alpha=0.8,
                   label=mode, color=mode_color_map[mode])

    ax.set_title(f"Transit Ridership in {year}", fontsize=16)
    ax.set_ylabel('Monthly Ridership', fontsize=14)
    ax.grid(True, linestyle='--', alpha=0.7)

    # Format x-axis to show only months
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%b'))
    ax.tick_params(axis='x', rotation=45)

    # Add year-specific legend only if this is the first subplot
    if i == 0:
        ax.legend(title='Transit Mode', title_fontsize=12, frameon=True, fontsize=10, loc='upper right')

# Remove empty subplots if there are fewer than 6 years
if len(years) < 6:
    for j in range(len(years), 6):
        fig.delaxes(axes[j])

plt.tight_layout(rect=[0, 0, 1, 0.96])
plt.savefig('figure7_yearly_ridership_comparison.png', dpi=300, bbox_inches='tight')
plt.show()